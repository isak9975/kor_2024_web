[ DB ]
    - 데이터베이스 : 데이터들의 집합
    - 데이터베이스 종류
        1. noSQL - nodeJs : SQL 대신 객체지향 데이터 관리
        2. 관계형(Relational) 데이터 베이스 - mySQL SQL 사용하는 테이블간 관계형 데이터베이스 관리

[ DAO ]
    - Data Access Object
    - JDBC : Java DATABASE Connection
    1. 데이터베이스 접근하여 자료들을 자바로 부터 데이터 관리 하는 객체
    2. 주요 인터페이스
        1. Connection
        2. PreparedStatement
        3. ResultSet

[ ORM ] O:Object, R:Relational, M:Mapping
    1. 정의 : 객체지향 프로그래밍에서 사용하는 객체 외 관꼐형 데이터베이스에서 사용하는 테이블과 매핑(연결)해주는 기술.
        즉] 자바 객체와 관계형 데이터베이스 테이블 간 매핑을 자동으로 처리해주는 기술
    2. 목적 : 개발자에게 조금더 편리성 제공

            1. myBatis  2. JPA

[ Hibernate ]
    1. 정의 : 자바에서 ORM 을 구현한 프레임워크, 자바 객체르 로간계형 데이터베이스에 쉽게 저장/조회할 수 있도록 도와주는 라이브러리.
        자바에서의 ORM 을 구현한 프레임워크
    2. 목적 : SQL 쿼리를 자동으로 생성 해주기 때문에 편리하고, 개발자 직접 SQL 작성하지 않아도 된다.
        ->  1.간단한 쿼리는 자동이지만, 복잡한 쿼리는 결국 직접 작성해야한다.
            2. 자동으로 타입 변환해주는 기능 제공
            3. JDBC(Dao)의 복잡함을 해결하고 간결한 코드를 이요하여 제공받은 라이브러리 빠른 개발
    3. Spring 프레임워크에서 공식적으로 지원

[ JPA ] :  J:JAVA, P:Persistence, A:API
    1. 정의 : 자바에서 ORM 을 사용할때 표준 API, JPA 는 자바에서 객체 관계 매핑(연결)을 어떻게 처리할지 정의한 규약/규칙
        -> Hibernate 는 구현체, JPA 는 인터페이스 : JPA(리모콘) 이용하여 hibernate 사용한다
    2. 목적 :
        1. JPA 를 이용하여 테이블의 쿼리 생성, 트랜젝션 관리, 엔티티 정의

[ ORM, Hibernate, JPA, DB 관계 ]
    1. ORM : 객체와 테이블 간의 매핑 처리 기술
    2. Hibernate : ORM 기술의 구현체 이며, 프레임워크
    3. JPA : ORM 기술의 구현체(Hibernate)를 조작하는 인터페이스, 프레임워크
    4. DB : 실제 데이터가 저장된 서버

* 인터페이스 란? 추상 메소드를 갖는 타입                            -(리모콘)
* 구현(객)체 란? 추상메소드를 구현한 클래스를 만든 객체/인스턴스        -(LG Tv)





-day60 이전
    개발자 -> DAO -> JDBC -> DB SERVER

-day61 이전
    개발자 -> JPA -> Hibernate -> DB SERVER


[ JPA 사용 할 준비 ]
    - gradle 프로젝트에 외부 라이브러리 추가 ==> 그레이들 추가
    1. build.gradle 파일에 JPA 의존성 추가한다.
        * JPA 기본 설정하지 않으면 Spring Web 실행 불가능.
        * runtimeOnly

    2. JPA 가 매핑할 DB 정보를 설정해야 한다.
        * 설정 파일의 이름이 정해져 있다. (프레임=틀, 워크) resources 폴더 -> application.properties
        1. spring.datasource.driverClassName = 각 DB 회사의 클래스 경로
            mysql : com.mysql.cj.jdbc.Driver
            oracle : oracle.,jdbc.driver.OracleDriver
        2. spring.datasource.url = 연동할 DB server url
        3. spring.datasource.username = 계정명
        4. spring.datasource.password = 비밀번호

[ 엔티티 Entity ] : 개체/실재.본체
    1. 정의 : 데이터베이스 테이블과 1:1로 매핑(연결)되는 인스턴스(객체)
        --> 관점 : 테이블 ==> 클래스, 레코드 ==>엔티티(인스턴스)
        --> 클래스 1개당 테이블 1개, 레코드 한개당 인스턴스 1개

        --> 클래스를 만들고 엔티티설정 : DB의 테이블 생성한다.
        --> 클래스로 인스턴스 생성 : DB의 테이블 레코드 생성한다

    2. 엔티티 정의하는 방법
        @Entity : 클래스 위에 어노테이션 작성하기
            * 관례적으로 테이블1개당 pk필드 는 1개 이상 한다.
            * pk설정을 하지 않으면 오류 난다.
        //Caused by: org.hibernate.AnnotationException: Entity 'main.day61.BoardEntity' has no identifier

        @Id : 해당하는 필드/멤버변수 를 primary key 표시
        @Column : 해당하는 필드/멤버변수를 테이블 열(속성/필드) 정의한다.

    3. 엔티티 와 테이블 어떻게 처리할지 설정 옵션
        spring.jpa.hibernate.ddl-auto = create/update/none/


        1. create : 서버가 실행 될때마다 기존 테이블 삭제하고 새로운 테이블로 생성한다.
        2. update : 서버가 실행 될때마다 기존 테이블 유지하고 변경할 사항이 있을 경우 자동 수정/생성한다.
        3. none : 개발자가 직접 수동 관리한다.(기본값)
        4. create-drop : 서버가 종료될때 마다 테이블 삭제된다.
        5. validate : 서버가 실행 될때마다 엔티티 와 데이터베이스 일치 여부 확인, 수정/생성 하지 않는다.

    4. 엔티티를 조작할 인터페이스 정의
        1. @Repository : 스프링 컨테이너 빈 주입하고 mvc 패턴의 Repository 담당 표시.
        2. extends JpaRepository<조작할엔티티클래스,PK 필드자바타입>
            *<> : 제네릭타입 -> 제네릭타입에는 기본형 사용불가.

    5. JPA 기본적으로 제공하는 함수.
        .save()


클래스 : 인스턴스를 만들기 위한 객체 설계도
인스턴스 : 클래스 기반으로 생성된 메모리 실체물
테이블: 행과 열로 이루어진 표/테이블
레코드 : 행(row) 단위의 자료
속성/필드 : 열(column) 단위의 자료


[ 엔티티 관련 어노테이션 ]
    - 엔티티란? DB 테이블과 매핑된 객체(인스턴스)
    - 엔티티 클래스는 DB 테이블 이고 엔티티 객체(인스턴스)는 테이블 레코드

    1. @Entity  : 객체를 관계형 데이터베이스 테이블에 매핑 정의
    2. @ID      : (고유값) 엔티티 기본키(Primary Key)를 지정
        * 모든 테이블은 1개 이상의 pk 필드를 갖는다.
        * JPARepository(인터페이스)는 pk 필드 1개를 필수로 한다.
            -> 없으면 실행 불가.
    3. @Column  : 테이블의 열(속성/필드) 매핑 정의
        - 자료형타입을 자동으로 변환해준다.
         <자바>           <mysql>
         int               int
         boolean           bit
         byte            tinyint
         short           smallint
         char            char(1)
         float           float
         double          double
         long            bigint
         String     varchar(255)
         1. @Column(columnDefinition = "DB type")
         2. @Column( nullable = )
            -> not null 의 제약 조건 : nullable = false
         3. @Column( unique = )
            -> unique 의 제약조건 : unique = true

    4. @Table   : 테이블 설정을 매핑 정의
        @Table( name= "테이블명" ) : 엔티티와 매핑된 테이블명을 정의
        -> 생략할 경우 자동으로 테이블명이 정해진다.
    5. @GeneratedValue(strategy = GenerationType.IDENTITY)
        -> auto_increment : mysql 의 제약조건중 하나로써 자동번호 부여


어노테이션 공부방법 : 암기x -> 노션/velog/티스토리 에 정리
    1. 과제/프로젝트를 통해 상황에 딸느 어노테이션 찾아쓰는 습관









