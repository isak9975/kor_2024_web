//회원가입
    public boolean regist(MemberDto memberDto){
        //1. 저장할 Dto를 entity로 변환한다.
        MemberEntity memberEntity = memberDto.toEntity();
        //2. 변환된 entity를 save한다.
        //3. save(영속속/연결된) 엔티티의 회원번호가 0보다 크면 성공
        MemberEntity result = memberRepository.save(memberEntity);

        if(result.getMno()>0){
            return true;
        }

        //아니면 실패
        return false;

    }

    로그인
    public boolean login(MemberDto memberDto){

//        //[ 방법1 ]
//        //(1) 모든 회원 엔티티를 조회한다.
//         List<MemberEntity> memberEntityAll = memberRepository.findAll();
//         //(2) 모든 회원 엔티티를 하나씩 조회한다.
//         for(int index=0;index >= memberEntityAll.size()-1;index++){
//             //==> forEach()문법 익히면 코드가 더욱 간단해 질듯
//             if(memberEntityAll.get(index).getMid().equals(memberDto.getMid())){ //아이디 판독
//                 if(memberEntityAll.get(index).getMpwd().equals(memberDto.getMpwd())){ //비밀번호 판도
//                     System.out.println("로그인 성공");
//                     return true;
//                 }
//             }
//         }
//        System.out.println("아이디 또는 비밀번호가 다릅니다");
//        return false;

        //[ 방법 2]
        boolean result = memberRepository.existsByMidAndMpwd(memberDto.getMid(),memberDto.getMpwd());

        if(result == true){
            System.out.println("로그인성공");
            return true;
        }
        else{
            System.out.println("로그인실패");
            return false;
        }


/* 인터페이스는 추상메소드를 가질 수 있는 타입이다
    // DAO 특정 값 조회 : select * from 테이블명 where 필드명=?
    // JPA 특정 값 조회 : 반환엔티티 findBy 필드명 ( 타입 조건값 )
        //1. 필드명을 이용한 엔티티 검색 : 반환엔티티 findBy 필드명( 타입 매개변수명 );
        //2. 필드명을 이용한 엔티티 존재여부 : boolean existsBy 필드명( 타입 매개변수명 );
        * 2개 이상의 필드명을 넣을 경우 카멜표기법
            -> 첫글자를 소문자로 시작하고 다음 단어의 첫문자만 대문자
            예] mycar -> MyCar, studentscorelist -> StudentScoreList
    예1] 아이디 중복 검사
        DAO : select * from member where mid = ?
        JPA : boolean existsByMid( String mid )

    예2] 로그인, 아이디와 비밀번호 일치 여부 검사
        Dao : select * from member where mid = ? and mpwd = ?
        JPA : boolean existsByMidAndMpwd( String mid, String mpwd )

    예3] 아이디 또는 이메일이 중복 일치 여부 검사
        Dao : select * from member where mid - ? or memail = ?
        JPA : boolean existsMyMidOrMemail( String mid, String memail )

    예4] 아이디로 엔티티 검색
            Dao : select * from member where mid=?
            JPA : MemberEntity findByMid( String mid);